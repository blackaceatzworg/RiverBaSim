<?xml version="1.0" encoding="UTF-8"?>
<agent version="1" agentcomment="This is an agent." agentclassname="RiverSection" agentparentclassname="" agentinterfaces="" agentimports="">
  <behaviorsteps>
    <behaviorstep x="551" y="9" scheduleannotationstart="1" scheduleannotationpick="" scheduleannotationinterval="1" scheduleannotationpriority="" scheduleannotationduration="" scheduleannotationshuffle="1" watchannotationid="" watchannotationquery="" watchannotationtargetclassname="" watchannotationtargetfieldnames="" watchannotationtriggercondition="" watchannotationtriggerschedule="1" watchannotationtriggerdelta="1" watchannotationtriggerpriority="" watchannotationpick="" comment="Flowing water from one section to another" visibility="0" returntype="" compiledname="flowingWater" parameters="" exceptions="">
      <label x="607" y="19" text="Flowing water"/>
    </behaviorstep>
  </behaviorsteps>
  <tasksteps>
    <taskstep x="472" y="309" comment="Self-cleaning process of pollutants" command1="solidConcentration.put(GetTickCount(), watchedAgent.solidConcentration.get(GetTickCount()-1)*0,4)" command2="bodConcentration.put(GetTickCount(), watchedAgent.bodConcentration.get(GetTickCount()-1)*0,9)" command3="codConcentration.put(GetTickCount(), watchedAgent.codConcentration.get(GetTickCount()-1)*0,92)" command4="ntConcentration.put(GetTickCount(), watchedAgent.ntConcentration.get(GetTickCount()-1)*0,98)" command5="ptConcentration.put(GetTickCount(), watchedAgent.ptConcentration.get(GetTickCount()-1)*0,97)">
      <label x="292" y="314" text="Self-cleaning process of pollutants"/>
    </taskstep>
    <taskstep x="477" y="238" comment="Receiving incoming flow of water from previous river section" command1="RiverSection watchedAgent = itr.next();" command2="amountWater.put(GetTickCount(), watchedAgent.amountWater.get(GetTickCount()-1))" command3="" command4="" command5="">
      <label x="353" y="255" text="Receive flow of water"/>
    </taskstep>
    <taskstep x="621" y="325" comment="Self-cleaning process of pollutants" command1="solidConcentration.put(GetTickCount(), 0)" command2="bodConcentration.put(GetTickCount(), 0)" command3="codConcentration.put(GetTickCount(), 0)" command4="ntConcentration.put(GetTickCount(), 0)" command5="ptConcentration.put(GetTickCount(), 0)">
      <label x="674" y="327" text="Set incoming mass of water as clean water"/>
    </taskstep>
    <taskstep x="625" y="249" comment="Receiving incoming flow of water from river source" command1="amountWater.put(GetTickCount(), defaultAmountWater)" command2="" command3="" command4="" command5="">
      <label x="678" y="258" text="Receive flow of water"/>
    </taskstep>
    <taskstep x="550" y="90" comment="Task to obtain previous river sections (where the water is coming from the river flow)" command1="Context context = ContextUtils.getContext (this)" command2="Network network = context.getProjection(Network.class, &quot;River&quot;)" command3="Iterable agents = network.getPredecessors(this)" command4="Iterator&lt;RiverSection&gt; itr = agents.iterator()" command5="">
      <label x="550" y="75" text="Obtain river section predecessors"/>
    </taskstep>
  </tasksteps>
  <decisionsteps>
    <decisionstep x="548" y="163" comment="Decision to distinguish river section as a starting source or as a middle/end section of the river" criteria="itr.hasNext()" branchType="if">
      <label x="465" y="144" text="Is there a previous river section sending water?"/>
    </decisionstep>
  </decisionsteps>
  <joinsteps/>
  <agentproperties>
    <agentproperty x="969" y="90" comment="Flow (amount) of water" visibility="0" compiledname="amountWater" type="riverbasim.WaterFeature" defaultvalue="new riverbasim.WaterFeature(GetTickCount(), 5000)">
      <label x="1025" y="101" text="Amount of water in the river section (m3)&quot;, converter = &quot;riverbasim.WaterFeatureConverter"/>
    </agentproperty>
    <agentproperty x="969" y="146" comment="Concentration of solids (MES)" visibility="0" compiledname="solidConcentration" type="riverbasim.WaterFeature" defaultvalue="new riverbasim.WaterFeature(GetTickCount(), 0)">
      <label x="1018" y="156" text="Solid concentration (gr/m3)&quot;, converter = &quot;riverbasim.WaterFeatureConverter"/>
    </agentproperty>
    <agentproperty x="969" y="203" comment="Concentration of BOD" visibility="0" compiledname="bodConcentration" type="riverbasim.WaterFeature" defaultvalue="new riverbasim.WaterFeature(GetTickCount(), 0)">
      <label x="1024" y="211" text="BOD concentration (gr./m3)&quot;, converter = &quot;riverbasim.WaterFeatureConverter"/>
    </agentproperty>
    <agentproperty x="970" y="258" comment="Concentration of COD" visibility="0" compiledname="codConcentration" type="riverbasim.WaterFeature" defaultvalue="new riverbasim.WaterFeature(GetTickCount(), 0)">
      <label x="1021" y="269" text="COD concentration (gr./m3)&quot;, converter = &quot;riverbasim.WaterFeatureConverter"/>
    </agentproperty>
    <agentproperty x="969" y="312" comment="Concentration of Nt" visibility="0" compiledname="ntConcentration" type="riverbasim.WaterFeature" defaultvalue="new riverbasim.WaterFeature(GetTickCount(), 0)">
      <label x="1018" y="321" text="Nitrogen Total concentration&quot;, converter = &quot;riverbasim.WaterFeatureConverter"/>
    </agentproperty>
    <agentproperty x="969" y="369" comment="Concentration of Phosphorus Total" visibility="0" compiledname="ptConcentration" type="riverbasim.WaterFeature" defaultvalue="new riverbasim.WaterFeature(GetTickCount(), 0)">
      <label x="1022" y="382" text="Phosphorus Total concentration&quot;, converter = &quot;riverbasim.WaterFeatureConverter"/>
    </agentproperty>
    <agentproperty x="968" y="30" comment="Default incoming water amount" visibility="0" compiledname="defaultAmountWater" type="double" defaultvalue="10000">
      <label x="1020" y="46" text="Default incoming water"/>
    </agentproperty>
  </agentproperties>
  <endsteps>
    <endstep x="480" y="381"/>
    <endstep x="627" y="397"/>
  </endsteps>
  <connections>
    <transitions>
      <transition>
        <transitionsource type="behavior" index="0" anchor="0"/>
        <transitiontarget type="task" index="4" anchor="0"/>
        <bendpoints/>
      </transition>
      <transition>
        <transitionsource type="task" index="0" anchor="2"/>
        <transitiontarget type="end" index="0" anchor="0"/>
        <bendpoints/>
      </transition>
      <transition>
        <transitionsource type="task" index="1" anchor="2"/>
        <transitiontarget type="task" index="0" anchor="0"/>
        <bendpoints/>
      </transition>
      <transition>
        <transitionsource type="task" index="2" anchor="2"/>
        <transitiontarget type="end" index="1" anchor="0"/>
        <bendpoints/>
      </transition>
      <transition>
        <transitionsource type="task" index="3" anchor="2"/>
        <transitiontarget type="task" index="2" anchor="0"/>
        <bendpoints/>
      </transition>
      <transition>
        <transitionsource type="task" index="4" anchor="2"/>
        <transitiontarget type="decision" index="0" anchor="0"/>
        <bendpoints/>
      </transition>
    </transitions>
    <booleantransitions>
      <booleantransition value="true">
        <transitionsource type="decision" index="0" anchor="1"/>
        <transitiontarget type="task" index="1" anchor="0"/>
        <bendpoints/>
      </booleantransition>
      <booleantransition value="false">
        <transitionsource type="decision" index="0" anchor="3"/>
        <transitiontarget type="task" index="3" anchor="0"/>
        <bendpoints/>
      </booleantransition>
    </booleantransitions>
  </connections>
</agent>