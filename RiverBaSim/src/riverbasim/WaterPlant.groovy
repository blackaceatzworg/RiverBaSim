/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package riverbasim

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class WaterPlant extends riverbasim.WaterHolder  {

    /**
     *
     * River section where the WWTP dumps treated water.
     * @field riverSectionLocation
     *
     */
    @Parameter (displayName = "River section location", usageName = "riverSectionLocation")
    public RiverSection getRiverSectionLocation() {
        return riverSectionLocation
    }
    public void setRiverSectionLocation(RiverSection newValue) {
        riverSectionLocation = newValue
    }
    public RiverSection riverSectionLocation = null

    /**
     *
     * Treatement capacity of the WWTP
     * @field capacity
     *
     */
    @Parameter (displayName = "Capacity", usageName = "capacity")
    public double getCapacity() {
        return capacity
    }
    public void setCapacity(double newValue) {
        capacity = newValue
    }
    public double capacity = 50000

    /**
     *
     * Flow (amount) of water
     * @field amountWater
     *
     */
    @Parameter (displayName = "Amount of water (m3)", converter = "riverbasim.WaterFeatureConverter", usageName = "amountWater")
    public riverbasim.WaterFeature getAmountWater() {
        return amountWater
    }
    public void setAmountWater(riverbasim.WaterFeature newValue) {
        amountWater = newValue
    }
    public riverbasim.WaterFeature amountWater = new riverbasim.WaterFeature(GetTickCount(), 0)

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "WaterPlant " + (agentIDCounter++)

    /**
     *
     * Treating wastewater
     * @method wastewaterTreatement
     *
     */
    public def wastewaterTreatement() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Cleans N units of wastewater
        double waterToRiver = amountWater.get(GetTickCount());
        if (capacity< waterToRiver) {
         waterToRiver = capacity;
        }
        double solidToRiver = solidConcentration.get(GetTickCount())*0.01;
        double bodToRiver = bodConcentration.get(GetTickCount())*0.01;
        double codToRiver =codConcentration.get(GetTickCount())*0.1:
        double ntToRiver = ntConcentration.get(GetTickCount())*0.02
        double ptToRiver = ptConcentration.get(GetTickCount())*0.3;
        riverSectionLocation.mixIncomingWater(waterToRiver, solidToRiver, bodToRiver, ntToRiver, ptToRiver);
        amountWater.put(GetTickCount(), amountWater.get(GetTickCount()) - waterToRiver);

        // This is an agent decision.
        if (amountWater.get(GetTickCount())==0) {

            // Remove pollutants if there's no remaining water
            solidConcentration.put(GitTickCount(), 0);
            bodConcentration.put(GitTickCount(), 0);
            codConcentration.put(GitTickCount(), 0);
            ntConcentration.put(GitTickCount(), 0);
            ptConcentration.put(GitTickCount(), 0);

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * Dumping water beyond capacity
     * @method overloadDump
     *
     */
    @ScheduledMethod(
        start = 1d,
        interval = 1d,
        shuffle = false
    )
    public void overloadDump() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (amountWater.get(GetTickCount())>capacity) {

            // Dump surplus water to river
            double waterToRiver = amountWater.get(GetTickCount())-capacity;
            double solidToRiver = solidConcentration.get(GetTickCount())*0.01;
            double bodToRiver = bodConcentration.get(GetTickCount())*0.01;
            double codToRiver =codConcentration.get(GetTickCount())*0.1:
            double ntToRiver = ntConcentration.get(GetTickCount())*0.02
            double ptToRiver = ptConcentration.get(GetTickCount())*0.3;
            riverSectionLocation.mixIncomingWater(waterToRiver, solidToRiver, bodToRiver, ntToRiver, ptToRiver);
            amountWater.put(GetTickCount(), capacity);

        } else  {


        }
        // End the method.
        return

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

