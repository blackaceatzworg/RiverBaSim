/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package riverbasim

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class WaterPlant extends riverbasim.WaterHolder  {

    /**
     *
     * River section where the WWTP dumps treated water.
     * @field riverSectionLocation
     *
     */
    @Parameter (displayName = "River section location", usageName = "riverSectionLocation")
    public RiverSection getRiverSectionLocation() {
        return riverSectionLocation
    }
    public void setRiverSectionLocation(RiverSection newValue) {
        riverSectionLocation = newValue
    }
    public RiverSection riverSectionLocation = null

    /**
     *
     * Flow (amount) of water
     * @field amountWater
     *
     */
    @Parameter (displayName = "Amount of water (m3)", usageName = "amountWater")
    public double getAmountWater() {
        return amountWater
    }
    public void setAmountWater(double newValue) {
        amountWater = newValue
    }
    public double amountWater = 0

    /**
     *
     * Treatement capacity of the WWTP
     * @field capacity
     *
     */
    @Parameter (displayName = "Capacity", usageName = "capacity")
    public double getCapacity() {
        return capacity
    }
    public void setCapacity(double newValue) {
        capacity = newValue
    }
    public double capacity = 50000

    /**
     *
     * Concentration of BOD
     * @field bodConcentration
     *
     */
    @Parameter (displayName = "BOD concentration (gr./m3)", usageName = "bodConcentration")
    public double getBodConcentration() {
        return bodConcentration
    }
    public void setBodConcentration(double newValue) {
        bodConcentration = newValue
    }
    public double bodConcentration = 0

    /**
     *
     * Concentration of solids (MES)
     * @field solidConcentration
     *
     */
    @Parameter (displayName = "Solid concentration (gr/m3)", usageName = "solidConcentration")
    public double getSolidConcentration() {
        return solidConcentration
    }
    public void setSolidConcentration(double newValue) {
        solidConcentration = newValue
    }
    public double solidConcentration = 0

    /**
     *
     * Concentration of Nt
     * @field ntConcentration
     *
     */
    @Parameter (displayName = "Nitrogen Total concentration", usageName = "ntConcentration")
    public double getNtConcentration() {
        return ntConcentration
    }
    public void setNtConcentration(double newValue) {
        ntConcentration = newValue
    }
    public double ntConcentration = 0

    /**
     *
     * Concentration of Phosphorus Total
     * @field ptConcentration
     *
     */
    @Parameter (displayName = "Phosphorus Total concentration", usageName = "ptConcentration")
    public double getPtConcentration() {
        return ptConcentration
    }
    public void setPtConcentration(double newValue) {
        ptConcentration = newValue
    }
    public double ptConcentration = 0

    /**
     *
     * Concentration of COD
     * @field codConcentration
     *
     */
    @Parameter (displayName = "COD concentration (gr./m3)", usageName = "codConcentration")
    public double getCodConcentration() {
        return codConcentration
    }
    public void setCodConcentration(double newValue) {
        codConcentration = newValue
    }
    public double codConcentration = 0

    /**
     *
     * Alert mode: the WWTP is dumping water
     * @field alertLevel
     *
     */
    @Parameter (displayName = "Alert level", usageName = "alertLevel")
    public double getAlertLevel() {
        return alertLevel
    }
    public void setAlertLevel(double newValue) {
        alertLevel = newValue
    }
    public double alertLevel = 0

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "WaterPlant " + (agentIDCounter++)

    /**
     *
     * Dumping water beyond capacity
     * @method overloadDump
     *
     */
    @ScheduledMethod(
        start = 1d,
        interval = 1d,
        shuffle = false
    )
    public void overloadDump() {

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()


        // This is an agent decision.
        if (amountWater>capacity) {

            // Dump surplus water to river
            Double amountToSend = new Double(amountWater-capacity)
            riverSectionLocation.mixIncomingWater(amountToSend, new Double(solidConcentration), new Double(bodConcentration), new Double(ntConcentration), new Double(ptConcentration))
            setAmountWater(capacity)

        } else  {


        }
        // End the method.
        return

    }

    /**
     *
     * Treating wastewater
     * @method wastewaterTreatement
     *
     */
    public def wastewaterTreatement() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Cleans N units of wastewater
        double waterToRiver = amountWater;
        if (capacity< waterToRiver) {
         waterToRiver = capacity;
        }
        double solidToRiver = solidConcentration*0.01;
        double bodToRiver = bodConcentration*0.01;
        double codToRiver =codConcentration*0.1;
        double ntToRiver = ntConcentration*0.02;
        double ptToRiver = ptConcentration*0.3;
        riverSectionLocation.mixIncomingWater(waterToRiver, solidToRiver, bodToRiver, ntToRiver, ptToRiver);
        amountWater -=waterToRiver;

        // This is an agent decision.
        if (amountWater==0) {

            // Remove pollutants if there's no remaining water
            setSolidConcentration(0;)
            setBodConcentration(0;)
            setCodConcentration(0;)
            setNtConcentration(0;)
            setPtConcentration(0;)

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * Mixing water
     * @method mixIncomingWater
     *
     */
    public def mixIncomingWater(amountWaterReceived, solidConcentrationReceived, bodConcentrationReceived, codConcentrationReceived, ntConcentrationReceived, ptConcentrationReceived) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Mix water
        setSolidConcentration((solidConcentration*amountWater+solidConcentrationReceived*amountWaterReceived)/(amountWater+amountWaterReceived);
        bodConcentration= (bodConcentration*amountWater+bodConcentrationReceived*amountWaterReceived)/(amountWater+amountWaterReceived);
        codConcentration= (codConcentration*amountWater+codConcentrationReceived*amountWaterReceived)/(amountWater+amountWaterReceived);
        ntConcentration= (ntConcentration*amountWater+ntConcentrationReceived*amountWaterReceived)/(amountWater+amountWaterReceived);
        ptConcentration= (ptConcentration*amountWater+ptConcentrationReceived*amountWaterReceived)/(amountWater+amountWaterReceived);
        amountWater+= amountWaterReceived;)
        // Return the results.
        return returnValue

    }

    /**
     *
     * Update alert level
     * @method alertLevel
     *
     */
    @ScheduledMethod(
        start = 1d,
        interval = 1d,
        shuffle = false
    )
    public def alertLevel() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Measure alert level
        setAlertLevel(min(2, amountWater/capacity))
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

