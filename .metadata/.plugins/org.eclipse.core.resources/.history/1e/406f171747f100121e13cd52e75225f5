package riverbasim;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;

import repast.simphony.context.DefaultContext;
import repast.simphony.context.space.gis.GeographyFactoryFinder;
import repast.simphony.context.space.graph.NetworkBuilder;
import repast.simphony.space.gis.Geography;
import repast.simphony.space.gis.GeographyParameters;
import repast.simphony.space.graph.Network;
import repast.simphony.space.graph.RepastEdge;

public class FlowContext extends DefaultContext<RiverSection> {
	Network<RiverSection> network;
	Geography<RiverSection> flowGeography;
	
	public FlowContext() {
		GeographyParameters<RiverSection> geoParamsFlow = new GeographyParameters<RiverSection>();
		flowGeography = GeographyFactoryFinder
				.createGeographyFactory(null).createGeography("FlowGeography",
						this, geoParamsFlow);
		System.out.println("Created FlowGeography");
		NetworkBuilder<RiverSection> builder = new NetworkBuilder<RiverSection>("FlowNetwork", this, true);
		network = builder.buildNetwork();
		RiverBaSimContext rc = (RiverBaSimContext) this.findParent("RiverBaSimContext");
		HashMap<RiverSection,RiverSection> flow = rc.flow;
		if(flow != null) {
			assignEdges(flow);
		}
	}

	public void assignEdges(HashMap<RiverSection, RiverSection> flow) {
		Iterator<Entry<RiverSection,RiverSection>> itMap = flow.entrySet().iterator();
		while(itMap.hasNext()) {
			Entry<RiverSection,RiverSection> entry = itMap.next();
			RiverSection origin, destination;
			origin = entry.getKey();
			destination = entry.getValue();
			if(origin != null && destination != null) {
				RepastEdge<RiverSection> edge = new RepastEdge<RiverSection>(origin, destination, true);
				network.addEdge(edge);
			}
		}
	}
}
