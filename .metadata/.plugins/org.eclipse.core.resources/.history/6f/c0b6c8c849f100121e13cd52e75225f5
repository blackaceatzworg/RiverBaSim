package riverbasim;

import java.io.File;
import java.io.IOException;

import repast.simphony.context.Context;
import repast.simphony.context.DefaultContext;
import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.space.gis.Geography;
import repast.simphony.space.graph.Network;
import repast.simphony.space.graph.ShortestPath;

public class ContextCreator implements ContextBuilder<Object>
{
	private static Context<Object> mainContext; // Useful to keep a reference to
												// the main context
	private static int agentID; // Used to generate unique agent ids

	/**
	 * Used to build the model, creating all subcontexts.
	 */
	public Context<Object> build(Context<Object> context)
	{		
		ContextCreator.mainContext = context;

		RiverBaSimContext rbContext = new RiverBaSimContext();
		context.addSubContext(rbContext);
		rbContext.createSubContexts();

		return context;
	}

	/**
	 * Creates a unique identifier for an agent. IDs are created in ascending
	 * order.
	 * 
	 * @return the unique identifier.
	 */
	public static int generateAgentID()
	{
		return ContextCreator.agentID++;
	}

	public static FlowContext getFlowContext()
	{
		return (FlowContext) mainContext.findContext("FlowContext");
	}

	@SuppressWarnings("unchecked")
	public static Geography<RiverBlock> getJunctionGeography()
	{
		return (Geography<RiverBlock>) ContextCreator.getFlowContext().getProjection("FlowGeography");
	}

	@SuppressWarnings("unchecked")
	public static Network<RiverBlock> getRoadNetwork()
	{
		return (Network<RiverBlock>) ContextCreator.getFlowContext().getProjection("FlowNetwork");
	}

	public static RiverContext getRiverContext()
	{
		return (RiverContext) mainContext.findContext("RiverContext");
	}

	@SuppressWarnings("unchecked")
	public static Geography<Road> getRoadGeography()
	{
		return (Geography<Road>) ContextCreator.getRoadContext().getProjection(
				"RoadGeography");
	}

	public static CityContext getCityContext()
	{
		return (CityContext) mainContext.findContext("CityContext");
	}

//	public static HouseContext getHouseContext()
//	{
//		return (HouseContext) mainContext.findContext("HouseContext");
//	}
//
//	public static Geography<House> getHouseGeography()
//	{
//		return (Geography<House>) ContextCreator.getHouseContext()
//				.getProjection("HouseGeography");
//	}
	
	public static POIContext getPOIContext()
	{
		return (POIContext) mainContext.findContext("POIContext");
	}

	@SuppressWarnings("unchecked")
	public static Geography<POI> getPOIGeography()
	{
		return (Geography<POI>)ContextCreator.getPOIContext().getProjection("POIGeography");
	}
	
	public static void main(String args[])
	{
		ContextCreator	cc;
		
		cc = new ContextCreator();
		cc.build(new DefaultContext<Object>());
	}

	public Context<Object> getMainContext()
	{
		return mainContext;
	}
	
	public static DroolsEngine getRuleEngine()
	{
		return engine;
	}

	public static void setDriverGeography(Geography<Driver> driverGeography2)
	{
		driverGeography = driverGeography2;
	}

	public static RechargePointContext getRechargePointContext()
	{
		return (RechargePointContext)mainContext.findContext("RechargePointContext");
	}
}
