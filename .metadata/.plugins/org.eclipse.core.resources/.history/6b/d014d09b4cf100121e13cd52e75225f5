package riverbasim;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map.Entry;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.geotools.data.shapefile.dbf.DbaseFileReader;
import org.geotools.data.shapefile.dbf.DbaseFileReader.Row;
import org.jgrapht.Graph;
import org.jgrapht.graph.Multigraph;

import repast.simphony.context.DefaultContext;
import repast.simphony.context.space.gis.GeographyFactoryFinder;
import repast.simphony.space.gis.Geography;
import repast.simphony.space.gis.GeographyParameters;
import repast.simphony.space.gis.Road;
import repast.simphony.space.gis.ShapefileLoader;
import repast.simphony.space.graph.RepastEdge;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.MultiLineString;
import com.vividsolutions.jts.geom.Point;

public class RiverBaSimContext extends DefaultContext<Object> {
	private HashSet<RiverSection> setBesos;
	HashMap<RiverSection,RiverSection> flow = null;

	private Graph<RiverSection,RiverBlock>	graph;
	
	/**
	 * Constructs a CityContextContext and creates a Geography (called
	 * RoadNetworkGeography) which is part of this context.
	 */
	public RiverBaSimContext()
	{
		super("RiverBaSimContext"); // Very important otherwise repast complains

		System.out.println("RiverBaSimContext: Building RiverBaSim context");

		/* Create a geography to display the sub-contexts of the city. */
		GeographyParameters<Object> geoParams = new GeographyParameters<Object>();
		GeographyFactoryFinder.createGeographyFactory(null).createGeography(
				"RiverBaSimGeography", this, geoParams);
	}

	public void createSubContexts()
	{
		this.addSubContext(new RiverContext());
		this.addSubContext(new FlowContext());
		
		buildRiverFlow();
	}
	
	public void buildRiverFlow()
	{
		Geography<RiverBlock>		rbGeography;
		Geography<RiverSection>	rsGeography;
		RiverContext		riverContext;
		FlowContext			flowContext;
		GeometryFactory		geomFac;
		Road				road, piece;
		Geometry			roadGeom;
		int					i;
		Coordinate			c1, c2;
		
		graph = new Multigraph<RiverSection,RiverBlock>(RiverBlock.class);
		System.out.println("RiverBaSimContext: building river flow graph");
		
		rbGeography = (Geography<RiverBlock>)ContextCreator.getFlowGeography();
		rsGeography = (Geography<RiverSection>)ContextCreator.getRiverGeography();
		riverContext = (RiverContext)ContextCreator.getRiverContext();
		flowContext = (FlowContext)ContextCreator.getFlowContext();
		
		flow = riverContext.getFlow();
		Iterator<Entry<RiverSection,RiverSection>> itMap = flow.entrySet().iterator();
		while(itMap.hasNext()) {
			Entry<RiverSection,RiverSection> entry = itMap.next();
			RiverSection origin, destination;
			origin = entry.getKey();
			destination = entry.getValue();
			if(origin != null && destination != null) {
				RepastEdge<RiverSection> edge = new RepastEdge<RiverSection>(origin, destination, false);
				network.addEdge(edge);
			}
		}

		geomFac = new GeometryFactory();		
	}


	public RiverBaSimContext() {
		super("RiverBaSimContext"); // must match name in model.score
		GeographyParameters<RiverSection> geoParams = new GeographyParameters<RiverSection>();
		Geography<RiverSection> riverGeography = GeographyFactoryFinder
				.createGeographyFactory(null).createGeography("RiverGeography",
						this, geoParams);
		System.out.println("Created RiverGeography");

		File selectedFile = new File("./contrib/x_besos/x_besos.dbf");
		FileChannel in = null;
		try {
			in = new FileInputStream(selectedFile).getChannel();
		} catch (FileNotFoundException ex) {
			Logger.getLogger(getClass().getName()).log(Level.DEBUG, null, ex);
		}
		DbaseFileReader r = null;
		try {
			r = new DbaseFileReader(in, false, Charset.forName("ISO-8859-1"));
		} catch (IOException ex1) {
			Logger.getLogger(getClass().getName()).log(Level.DEBUG, null, ex1);
		}

		Object[] fields = new Object[r.getHeader().getNumFields()];
		while (r.hasNext()) {
			try {
				r.readEntry(fields);
				Row row = r.readRow();
				System.out.println(row);
			} catch (IOException ex1) {
				Logger.getLogger(getClass().getName()).log(Level.DEBUG, null,
						ex1);
			}
		}
		try {
			r.close();
		} catch (IOException ex1) {
			Logger.getLogger(getClass().getName()).log(Level.DEBUG, null, ex1);
		}

		File shapefile = null;
		ShapefileLoader<RiverSection> riverLoader = null;
		try {
			shapefile = new File("./contrib/x_besos/x_besos.shp");
			riverLoader = new ShapefileLoader<RiverSection>(RiverSection.class,
					shapefile.toURL(), riverGeography, this);
		} catch (java.net.MalformedURLException e) {
			e.printStackTrace();
		}
		while (riverLoader.hasNext()) {
			riverLoader.next();
		}

		setBesos = new HashSet<RiverSection>();
		for (RiverSection p : riverGeography.getAllObjects()) {
			Geometry geom = riverGeography.getGeometry(p);
			Coordinate coord = geom.getCoordinate();
			MultiLineString line = (MultiLineString)geom;
			if(p.getNom().startsWith("el Bes˜s")) {
				setBesos.add(p);
				System.out.println(p.getNom() + " is at: (" + coord.x + ","
						+ coord.y + ") [size of set: " + setBesos.size() + "]");
			} else {
				this.remove(p);
			}
		}
		
		flow = new HashMap<RiverSection,RiverSection>();
		HashSet<RiverSection> tempBesos = new HashSet<RiverSection>();
		tempBesos.addAll(setBesos);
		Iterator<RiverSection> it1, it2;
		it1 = setBesos.iterator();
		while(it1.hasNext()) {
			RiverSection p1 = it1.next();
			Geometry geom1 = riverGeography.getGeometry(p1);
			Coordinate coord1 = geom1.getCoordinate();
			MultiLineString line1 = (MultiLineString)geom1;
			tempBesos.remove(p1);
			it2 = tempBesos.iterator();
			double min = Double.POSITIVE_INFINITY;
			RiverSection nearest = null;
			while(it2.hasNext()) {
				RiverSection p2 = it2.next();
				Geometry geom2 = riverGeography.getGeometry(p2);
				Coordinate coord2 = geom2.getCoordinate();
				MultiLineString line2 = (MultiLineString)geom2;
				double candidate = coord1.distance(coord2);
				if(candidate < min) {
					nearest = p2;
					min = candidate;
				}
			}
			flow.put(p1, nearest);
		}
		
		FlowContext fc = (FlowContext)this.findContext("FlowContext");
		if(fc != null) {
			fc.assignEdges(flow);
		}
		
		this.addSubContext(new FlowContext(this));
	}
}
